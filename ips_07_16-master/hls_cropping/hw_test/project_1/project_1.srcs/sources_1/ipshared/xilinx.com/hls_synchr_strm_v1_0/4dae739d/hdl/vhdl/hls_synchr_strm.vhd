-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_synchr_strm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    src_V_V_TVALID : IN STD_LOGIC;
    src_V_V_TREADY : OUT STD_LOGIC;
    dst_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    dst_V_V_TVALID : OUT STD_LOGIC;
    dst_V_V_TREADY : IN STD_LOGIC;
    start_sig : IN STD_LOGIC;
    start_sigo : OUT STD_LOGIC;
    start_sigo_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hls_synchr_strm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_synchr_strm,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.740000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=10,HLS_SYN_LUT=8}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_pp0_stg0_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal counter_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_start_r : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal start_sig_read_read_fu_42_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_sig_read_reg_102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_pp0_stg0_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_30 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_start_load_reg_111 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_42 : BOOLEAN;
    signal ap_sig_ioackin_dst_V_V_TREADY : STD_LOGIC;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppstg_start_sig_read_reg_102_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal condition_start_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ioackin_dst_V_V_TREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_start_sigo_dummy_ack : STD_LOGIC := '0';
    signal condition_start_fu_80_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_74_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_pprstidle_pp0 : STD_LOGIC;
    signal ap_sig_bdd_113 : BOOLEAN;
    signal ap_sig_bdd_112 : BOOLEAN;
    signal ap_sig_bdd_116 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_dst_V_V_TREADY assign process. --
    ap_reg_ioackin_dst_V_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_dst_V_V_TREADY <= ap_const_logic_0;
            else
                if (ap_sig_bdd_112) then
                    if (not(((ap_sig_bdd_42 or (not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then 
                        ap_reg_ioackin_dst_V_V_TREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_113) then 
                        ap_reg_ioackin_dst_V_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_start_sigo_dummy_ack assign process. --
    ap_reg_ioackin_start_sigo_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_start_sigo_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it2)) then
                    if (not(((ap_sig_bdd_42 or (not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then 
                        ap_reg_ioackin_start_sigo_dummy_ack <= ap_const_logic_0;
                    elsif (ap_sig_bdd_116) then 
                        ap_reg_ioackin_start_sigo_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_sig_bdd_42 or (not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (not(((ap_sig_bdd_42 or (not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and not(((ap_sig_bdd_42 or (not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then
                ap_reg_ppstg_start_sig_read_reg_102_pp0_it1 <= start_sig_read_reg_102;
                ap_start_load_reg_111 <= ap_start_r;
                start_sig_read_reg_102 <= start_sig_read_read_fu_42_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_0) and (ap_const_logic_1 = ap_const_logic_1) and not(((ap_sig_bdd_42 or (not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = condition_start_fu_80_p2)))) then
                ap_start_r <= ap_const_lv1_1;
                counter_V <= ap_const_lv1_1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_start_load_reg_111, ap_sig_bdd_42, ap_sig_ioackin_dst_V_V_TREADY, ap_reg_ppiten_pp0_it2, ap_sig_pprstidle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_pp0_stg0_fsm_0 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_112 assign process. --
    ap_sig_bdd_112_assign_proc : process(ap_start_load_reg_111, ap_reg_ppiten_pp0_it2)
    begin
                ap_sig_bdd_112 <= (not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2));
    end process;


    -- ap_sig_bdd_113 assign process. --
    ap_sig_bdd_113_assign_proc : process(dst_V_V_TREADY, ap_sig_bdd_42, ap_reg_ppiten_pp0_it2)
    begin
                ap_sig_bdd_113 <= (not((ap_sig_bdd_42 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_logic_1 = dst_V_V_TREADY));
    end process;


    -- ap_sig_bdd_116 assign process. --
    ap_sig_bdd_116_assign_proc : process(ap_sig_bdd_42, ap_reg_ppiten_pp0_it2)
    begin
                ap_sig_bdd_116 <= (not((ap_sig_bdd_42 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_logic_1 = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_30 assign process. --
    ap_sig_bdd_30_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_30 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_42 assign process. --
    ap_sig_bdd_42_assign_proc : process(src_V_V_TVALID, ap_start_load_reg_111)
    begin
                ap_sig_bdd_42 <= ((src_V_V_TVALID = ap_const_logic_0) and not((ap_const_lv1_0 = ap_start_load_reg_111)));
    end process;


    -- ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. --
    ap_sig_cseq_ST_pp0_stg0_fsm_0_assign_proc : process(ap_sig_bdd_30)
    begin
        if (ap_sig_bdd_30) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_dst_V_V_TREADY assign process. --
    ap_sig_ioackin_dst_V_V_TREADY_assign_proc : process(dst_V_V_TREADY, ap_reg_ioackin_dst_V_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_dst_V_V_TREADY)) then 
            ap_sig_ioackin_dst_V_V_TREADY <= dst_V_V_TREADY;
        else 
            ap_sig_ioackin_dst_V_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    ap_sig_pprstidle_pp0 <= ap_const_logic_0;
    condition_start_fu_80_p0 <= (0=>start_sig, others=>'-');
    condition_start_fu_80_p2 <= (condition_start_fu_80_p0 and tmp_fu_74_p2);
    dst_V_V_TDATA <= src_V_V_TDATA;

    -- dst_V_V_TVALID assign process. --
    dst_V_V_TVALID_assign_proc : process(ap_start_load_reg_111, ap_sig_bdd_42, ap_reg_ppiten_pp0_it2, ap_reg_ioackin_dst_V_V_TREADY)
    begin
        if ((not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_42 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_logic_0 = ap_reg_ioackin_dst_V_V_TREADY))) then 
            dst_V_V_TVALID <= ap_const_logic_1;
        else 
            dst_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- src_V_V_TREADY assign process. --
    src_V_V_TREADY_assign_proc : process(ap_start_load_reg_111, ap_sig_bdd_42, ap_sig_ioackin_dst_V_V_TREADY, ap_reg_ppiten_pp0_it2)
    begin
        if ((not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not(((ap_sig_bdd_42 or (not((ap_const_lv1_0 = ap_start_load_reg_111)) and (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY))) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
            src_V_V_TREADY <= ap_const_logic_1;
        else 
            src_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    start_sig_read_read_fu_42_p2 <= (0=>start_sig, others=>'-');
    start_sigo <= ap_reg_ppstg_start_sig_read_reg_102_pp0_it1(0);

    -- start_sigo_ap_vld assign process. --
    start_sigo_ap_vld_assign_proc : process(ap_sig_bdd_42, ap_reg_ppiten_pp0_it2, ap_reg_ioackin_start_sigo_dummy_ack)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_42 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_logic_0 = ap_reg_ioackin_start_sigo_dummy_ack))) then 
            start_sigo_ap_vld <= ap_const_logic_1;
        else 
            start_sigo_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_74_p2 <= (counter_V xor ap_const_lv1_1);
end behav;
