-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_threshold is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    sof_i : IN STD_LOGIC;
    src_V_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    src_V_V_TVALID : IN STD_LOGIC;
    src_V_V_TREADY : OUT STD_LOGIC;
    dst_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dst_V_V_TVALID : OUT STD_LOGIC;
    dst_V_V_TREADY : IN STD_LOGIC;
    sof_o : OUT STD_LOGIC;
    sof_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hls_threshold is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "hls_threshold,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=1.998000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=67}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal ap_sig_ioackin_dst_V_V_TREADY : STD_LOGIC;
    signal ap_reg_ioackin_dst_V_V_TREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_sof_o_dummy_ack : STD_LOGIC := '0';
    signal tmp_fu_98_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_108_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_124_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_140_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_fu_156_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_fu_172_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_fu_188_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_fu_204_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_1_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_2_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_3_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_4_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_5_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_6_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_7_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_160 : BOOLEAN;
    signal ap_sig_bdd_162 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_dst_V_V_TREADY assign process. --
    ap_reg_ioackin_dst_V_V_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_dst_V_V_TREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                    if (not(((src_V_V_TVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY)))) then 
                        ap_reg_ioackin_dst_V_V_TREADY <= ap_const_logic_0;
                    elsif (ap_sig_bdd_160) then 
                        ap_reg_ioackin_dst_V_V_TREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_sof_o_dummy_ack assign process. --
    ap_reg_ioackin_sof_o_dummy_ack_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_sof_o_dummy_ack <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then
                    if (not(((src_V_V_TVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY)))) then 
                        ap_reg_ioackin_sof_o_dummy_ack <= ap_const_logic_0;
                    elsif (ap_sig_bdd_162) then 
                        ap_reg_ioackin_sof_o_dummy_ack <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (src_V_V_TVALID, ap_CS_fsm, ap_sig_ioackin_dst_V_V_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_160 assign process. --
    ap_sig_bdd_160_assign_proc : process(src_V_V_TVALID, dst_V_V_TREADY)
    begin
                ap_sig_bdd_160 <= (not((src_V_V_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = dst_V_V_TREADY));
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(src_V_V_TVALID)
    begin
                ap_sig_bdd_162 <= (not((src_V_V_TVALID = ap_const_logic_0)) and (ap_const_logic_1 = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_dst_V_V_TREADY assign process. --
    ap_sig_ioackin_dst_V_V_TREADY_assign_proc : process(dst_V_V_TREADY, ap_reg_ioackin_dst_V_V_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_dst_V_V_TREADY)) then 
            ap_sig_ioackin_dst_V_V_TREADY <= dst_V_V_TREADY;
        else 
            ap_sig_ioackin_dst_V_V_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    dst_V_V_TDATA <= (((((((tmp_3_fu_102_p2 & tmp_3_1_fu_118_p2) & tmp_3_2_fu_134_p2) & tmp_3_3_fu_150_p2) & tmp_3_4_fu_166_p2) & tmp_3_5_fu_182_p2) & tmp_3_6_fu_198_p2) & tmp_3_7_fu_214_p2);

    -- dst_V_V_TVALID assign process. --
    dst_V_V_TVALID_assign_proc : process(src_V_V_TVALID, ap_sig_cseq_ST_st1_fsm_0, ap_reg_ioackin_dst_V_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((src_V_V_TVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_dst_V_V_TREADY))) then 
            dst_V_V_TVALID <= ap_const_logic_1;
        else 
            dst_V_V_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_108_p4 <= src_V_V_TDATA(15 downto 8);
    p_Result_3_fu_140_p4 <= src_V_V_TDATA(31 downto 24);
    p_Result_4_fu_156_p4 <= src_V_V_TDATA(39 downto 32);
    p_Result_5_fu_172_p4 <= src_V_V_TDATA(47 downto 40);
    p_Result_6_fu_188_p4 <= src_V_V_TDATA(55 downto 48);
    p_Result_7_fu_204_p4 <= src_V_V_TDATA(63 downto 56);
    p_Result_s_fu_124_p4 <= src_V_V_TDATA(23 downto 16);
    sof_o <= sof_i;

    -- sof_o_ap_vld assign process. --
    sof_o_ap_vld_assign_proc : process(src_V_V_TVALID, ap_sig_cseq_ST_st1_fsm_0, ap_reg_ioackin_sof_o_dummy_ack)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((src_V_V_TVALID = ap_const_logic_0)) and (ap_const_logic_0 = ap_reg_ioackin_sof_o_dummy_ack))) then 
            sof_o_ap_vld <= ap_const_logic_1;
        else 
            sof_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    -- src_V_V_TREADY assign process. --
    src_V_V_TREADY_assign_proc : process(src_V_V_TVALID, ap_sig_cseq_ST_st1_fsm_0, ap_sig_ioackin_dst_V_V_TREADY)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(((src_V_V_TVALID = ap_const_logic_0) or (ap_const_logic_0 = ap_sig_ioackin_dst_V_V_TREADY))))) then 
            src_V_V_TREADY <= ap_const_logic_1;
        else 
            src_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3_1_fu_118_p2 <= "1" when (unsigned(p_Result_1_fu_108_p4) > unsigned(ap_const_lv8_64)) else "0";
    tmp_3_2_fu_134_p2 <= "1" when (unsigned(p_Result_s_fu_124_p4) > unsigned(ap_const_lv8_64)) else "0";
    tmp_3_3_fu_150_p2 <= "1" when (unsigned(p_Result_3_fu_140_p4) > unsigned(ap_const_lv8_64)) else "0";
    tmp_3_4_fu_166_p2 <= "1" when (unsigned(p_Result_4_fu_156_p4) > unsigned(ap_const_lv8_64)) else "0";
    tmp_3_5_fu_182_p2 <= "1" when (unsigned(p_Result_5_fu_172_p4) > unsigned(ap_const_lv8_64)) else "0";
    tmp_3_6_fu_198_p2 <= "1" when (unsigned(p_Result_6_fu_188_p4) > unsigned(ap_const_lv8_64)) else "0";
    tmp_3_7_fu_214_p2 <= "1" when (unsigned(p_Result_7_fu_204_p4) > unsigned(ap_const_lv8_64)) else "0";
    tmp_3_fu_102_p2 <= "1" when (unsigned(tmp_fu_98_p1) > unsigned(ap_const_lv8_64)) else "0";
    tmp_fu_98_p1 <= src_V_V_TDATA(8 - 1 downto 0);
end behav;
