// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _hls_cropping_strm_HH_
#define _hls_cropping_strm_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "hls_cropping_strm_Block_proc.h"

namespace ap_rtl {

struct hls_cropping_strm : public sc_module {
    // Port declarations 18
    sc_in< sc_lv<8> > src_TDATA;
    sc_in< sc_lv<1> > src_TKEEP;
    sc_in< sc_lv<1> > src_TSTRB;
    sc_in< sc_lv<1> > src_TUSER;
    sc_in< sc_lv<1> > src_TLAST;
    sc_in< sc_lv<1> > src_TID;
    sc_in< sc_lv<1> > src_TDEST;
    sc_out< sc_lv<16> > dst_V_V_TDATA;
    sc_out< sc_logic > dst_valid;
    sc_out< sc_logic > sof_sig;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > src_TVALID;
    sc_out< sc_logic > src_TREADY;
    sc_out< sc_logic > dst_V_V_TVALID;
    sc_in< sc_logic > dst_V_V_TREADY;
    sc_out< sc_logic > sof_sig_ap_vld;
    sc_out< sc_logic > dst_valid_ap_vld;


    // Module declarations
    hls_cropping_strm(sc_module_name name);
    SC_HAS_PROCESS(hls_cropping_strm);

    ~hls_cropping_strm();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    hls_cropping_strm_Block_proc* hls_cropping_strm_Block_proc_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_ap_start;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_ap_done;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_ap_continue;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_ap_idle;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_ap_ready;
    sc_signal< sc_lv<8> > hls_cropping_strm_Block_proc_U0_src_TDATA;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_src_TVALID;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_src_TREADY;
    sc_signal< sc_lv<1> > hls_cropping_strm_Block_proc_U0_src_TKEEP;
    sc_signal< sc_lv<1> > hls_cropping_strm_Block_proc_U0_src_TSTRB;
    sc_signal< sc_lv<1> > hls_cropping_strm_Block_proc_U0_src_TUSER;
    sc_signal< sc_lv<1> > hls_cropping_strm_Block_proc_U0_src_TLAST;
    sc_signal< sc_lv<1> > hls_cropping_strm_Block_proc_U0_src_TID;
    sc_signal< sc_lv<1> > hls_cropping_strm_Block_proc_U0_src_TDEST;
    sc_signal< sc_lv<16> > hls_cropping_strm_Block_proc_U0_dst_V_V_TDATA;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_dst_V_V_TVALID;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_dst_V_V_TREADY;
    sc_signal< sc_lv<1> > hls_cropping_strm_Block_proc_U0_sof_sig;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_sof_sig_ap_vld;
    sc_signal< sc_lv<1> > hls_cropping_strm_Block_proc_U0_dst_valid;
    sc_signal< sc_logic > hls_cropping_strm_Block_proc_U0_dst_valid_ap_vld;
    sc_signal< sc_logic > ap_sig_hs_continue;
    sc_signal< sc_logic > ap_CS;
    sc_signal< sc_logic > ap_sig_hs_done;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_logic ap_const_logic_0;
    static const sc_logic ap_const_logic_1;
    static const bool ap_true;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_hs_continue();
    void thread_ap_sig_hs_done();
    void thread_dst_V_V_TDATA();
    void thread_dst_V_V_TVALID();
    void thread_dst_valid();
    void thread_dst_valid_ap_vld();
    void thread_hls_cropping_strm_Block_proc_U0_ap_continue();
    void thread_hls_cropping_strm_Block_proc_U0_ap_start();
    void thread_hls_cropping_strm_Block_proc_U0_dst_V_V_TREADY();
    void thread_hls_cropping_strm_Block_proc_U0_src_TDATA();
    void thread_hls_cropping_strm_Block_proc_U0_src_TDEST();
    void thread_hls_cropping_strm_Block_proc_U0_src_TID();
    void thread_hls_cropping_strm_Block_proc_U0_src_TKEEP();
    void thread_hls_cropping_strm_Block_proc_U0_src_TLAST();
    void thread_hls_cropping_strm_Block_proc_U0_src_TSTRB();
    void thread_hls_cropping_strm_Block_proc_U0_src_TUSER();
    void thread_hls_cropping_strm_Block_proc_U0_src_TVALID();
    void thread_sof_sig();
    void thread_sof_sig_ap_vld();
    void thread_src_TREADY();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
