// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "hls_cropping_strm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<16> hls_cropping_strm::ap_const_lv16_0 = "0000000000000000";
const sc_logic hls_cropping_strm::ap_const_logic_0 = sc_dt::Log_0;
const sc_logic hls_cropping_strm::ap_const_logic_1 = sc_dt::Log_1;
const bool hls_cropping_strm::ap_true = true;

hls_cropping_strm::hls_cropping_strm(sc_module_name name) : sc_module(name), mVcdFile(0) {
    hls_cropping_strm_Block_proc_U0 = new hls_cropping_strm_Block_proc("hls_cropping_strm_Block_proc_U0");
    hls_cropping_strm_Block_proc_U0->ap_clk(ap_clk);
    hls_cropping_strm_Block_proc_U0->ap_rst(ap_rst_n_inv);
    hls_cropping_strm_Block_proc_U0->ap_start(hls_cropping_strm_Block_proc_U0_ap_start);
    hls_cropping_strm_Block_proc_U0->ap_done(hls_cropping_strm_Block_proc_U0_ap_done);
    hls_cropping_strm_Block_proc_U0->ap_continue(hls_cropping_strm_Block_proc_U0_ap_continue);
    hls_cropping_strm_Block_proc_U0->ap_idle(hls_cropping_strm_Block_proc_U0_ap_idle);
    hls_cropping_strm_Block_proc_U0->ap_ready(hls_cropping_strm_Block_proc_U0_ap_ready);
    hls_cropping_strm_Block_proc_U0->src_TDATA(hls_cropping_strm_Block_proc_U0_src_TDATA);
    hls_cropping_strm_Block_proc_U0->src_TVALID(hls_cropping_strm_Block_proc_U0_src_TVALID);
    hls_cropping_strm_Block_proc_U0->src_TREADY(hls_cropping_strm_Block_proc_U0_src_TREADY);
    hls_cropping_strm_Block_proc_U0->src_TKEEP(hls_cropping_strm_Block_proc_U0_src_TKEEP);
    hls_cropping_strm_Block_proc_U0->src_TSTRB(hls_cropping_strm_Block_proc_U0_src_TSTRB);
    hls_cropping_strm_Block_proc_U0->src_TUSER(hls_cropping_strm_Block_proc_U0_src_TUSER);
    hls_cropping_strm_Block_proc_U0->src_TLAST(hls_cropping_strm_Block_proc_U0_src_TLAST);
    hls_cropping_strm_Block_proc_U0->src_TID(hls_cropping_strm_Block_proc_U0_src_TID);
    hls_cropping_strm_Block_proc_U0->src_TDEST(hls_cropping_strm_Block_proc_U0_src_TDEST);
    hls_cropping_strm_Block_proc_U0->dst_V_V_TDATA(hls_cropping_strm_Block_proc_U0_dst_V_V_TDATA);
    hls_cropping_strm_Block_proc_U0->dst_V_V_TVALID(hls_cropping_strm_Block_proc_U0_dst_V_V_TVALID);
    hls_cropping_strm_Block_proc_U0->dst_V_V_TREADY(hls_cropping_strm_Block_proc_U0_dst_V_V_TREADY);
    hls_cropping_strm_Block_proc_U0->sof_sig(hls_cropping_strm_Block_proc_U0_sof_sig);
    hls_cropping_strm_Block_proc_U0->sof_sig_ap_vld(hls_cropping_strm_Block_proc_U0_sof_sig_ap_vld);
    hls_cropping_strm_Block_proc_U0->dst_valid(hls_cropping_strm_Block_proc_U0_dst_valid);
    hls_cropping_strm_Block_proc_U0->dst_valid_ap_vld(hls_cropping_strm_Block_proc_U0_dst_valid_ap_vld);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_hs_continue);

    SC_METHOD(thread_ap_sig_hs_done);
    sensitive << ( hls_cropping_strm_Block_proc_U0_ap_done );

    SC_METHOD(thread_dst_V_V_TDATA);
    sensitive << ( hls_cropping_strm_Block_proc_U0_dst_V_V_TDATA );

    SC_METHOD(thread_dst_V_V_TVALID);
    sensitive << ( hls_cropping_strm_Block_proc_U0_dst_V_V_TVALID );

    SC_METHOD(thread_dst_valid);
    sensitive << ( hls_cropping_strm_Block_proc_U0_dst_valid );

    SC_METHOD(thread_dst_valid_ap_vld);
    sensitive << ( hls_cropping_strm_Block_proc_U0_dst_valid_ap_vld );

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_ap_continue);

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_ap_start);

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_dst_V_V_TREADY);
    sensitive << ( dst_V_V_TREADY );

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_src_TDATA);
    sensitive << ( src_TDATA );

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_src_TDEST);
    sensitive << ( src_TDEST );

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_src_TID);
    sensitive << ( src_TID );

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_src_TKEEP);
    sensitive << ( src_TKEEP );

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_src_TLAST);
    sensitive << ( src_TLAST );

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_src_TSTRB);
    sensitive << ( src_TSTRB );

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_src_TUSER);
    sensitive << ( src_TUSER );

    SC_METHOD(thread_hls_cropping_strm_Block_proc_U0_src_TVALID);
    sensitive << ( src_TVALID );

    SC_METHOD(thread_sof_sig);
    sensitive << ( hls_cropping_strm_Block_proc_U0_sof_sig );

    SC_METHOD(thread_sof_sig_ap_vld);
    sensitive << ( hls_cropping_strm_Block_proc_U0_sof_sig_ap_vld );

    SC_METHOD(thread_src_TREADY);
    sensitive << ( hls_cropping_strm_Block_proc_U0_src_TREADY );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hls_cropping_strm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, src_TDATA, "(port)src_TDATA");
    sc_trace(mVcdFile, src_TKEEP, "(port)src_TKEEP");
    sc_trace(mVcdFile, src_TSTRB, "(port)src_TSTRB");
    sc_trace(mVcdFile, src_TUSER, "(port)src_TUSER");
    sc_trace(mVcdFile, src_TLAST, "(port)src_TLAST");
    sc_trace(mVcdFile, src_TID, "(port)src_TID");
    sc_trace(mVcdFile, src_TDEST, "(port)src_TDEST");
    sc_trace(mVcdFile, dst_V_V_TDATA, "(port)dst_V_V_TDATA");
    sc_trace(mVcdFile, dst_valid, "(port)dst_valid");
    sc_trace(mVcdFile, sof_sig, "(port)sof_sig");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, src_TVALID, "(port)src_TVALID");
    sc_trace(mVcdFile, src_TREADY, "(port)src_TREADY");
    sc_trace(mVcdFile, dst_V_V_TVALID, "(port)dst_V_V_TVALID");
    sc_trace(mVcdFile, dst_V_V_TREADY, "(port)dst_V_V_TREADY");
    sc_trace(mVcdFile, sof_sig_ap_vld, "(port)sof_sig_ap_vld");
    sc_trace(mVcdFile, dst_valid_ap_vld, "(port)dst_valid_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_ap_start, "hls_cropping_strm_Block_proc_U0_ap_start");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_ap_done, "hls_cropping_strm_Block_proc_U0_ap_done");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_ap_continue, "hls_cropping_strm_Block_proc_U0_ap_continue");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_ap_idle, "hls_cropping_strm_Block_proc_U0_ap_idle");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_ap_ready, "hls_cropping_strm_Block_proc_U0_ap_ready");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_src_TDATA, "hls_cropping_strm_Block_proc_U0_src_TDATA");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_src_TVALID, "hls_cropping_strm_Block_proc_U0_src_TVALID");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_src_TREADY, "hls_cropping_strm_Block_proc_U0_src_TREADY");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_src_TKEEP, "hls_cropping_strm_Block_proc_U0_src_TKEEP");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_src_TSTRB, "hls_cropping_strm_Block_proc_U0_src_TSTRB");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_src_TUSER, "hls_cropping_strm_Block_proc_U0_src_TUSER");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_src_TLAST, "hls_cropping_strm_Block_proc_U0_src_TLAST");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_src_TID, "hls_cropping_strm_Block_proc_U0_src_TID");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_src_TDEST, "hls_cropping_strm_Block_proc_U0_src_TDEST");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_dst_V_V_TDATA, "hls_cropping_strm_Block_proc_U0_dst_V_V_TDATA");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_dst_V_V_TVALID, "hls_cropping_strm_Block_proc_U0_dst_V_V_TVALID");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_dst_V_V_TREADY, "hls_cropping_strm_Block_proc_U0_dst_V_V_TREADY");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_sof_sig, "hls_cropping_strm_Block_proc_U0_sof_sig");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_sof_sig_ap_vld, "hls_cropping_strm_Block_proc_U0_sof_sig_ap_vld");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_dst_valid, "hls_cropping_strm_Block_proc_U0_dst_valid");
    sc_trace(mVcdFile, hls_cropping_strm_Block_proc_U0_dst_valid_ap_vld, "hls_cropping_strm_Block_proc_U0_dst_valid_ap_vld");
    sc_trace(mVcdFile, ap_sig_hs_continue, "ap_sig_hs_continue");
    sc_trace(mVcdFile, ap_CS, "ap_CS");
    sc_trace(mVcdFile, ap_sig_hs_done, "ap_sig_hs_done");
#endif

    }
    mHdltvinHandle.open("hls_cropping_strm.hdltvin.dat");
    mHdltvoutHandle.open("hls_cropping_strm.hdltvout.dat");
}

hls_cropping_strm::~hls_cropping_strm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete hls_cropping_strm_Block_proc_U0;
}

void hls_cropping_strm::thread_ap_clk_no_reset_() {
    ap_CS = ap_const_logic_0;
}

void hls_cropping_strm::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void hls_cropping_strm::thread_ap_sig_hs_continue() {
    ap_sig_hs_continue = ap_const_logic_0;
}

void hls_cropping_strm::thread_ap_sig_hs_done() {
    if (esl_seteq<1,1,1>(hls_cropping_strm_Block_proc_U0_ap_done.read(), ap_const_logic_1)) {
        ap_sig_hs_done = ap_const_logic_1;
    } else {
        ap_sig_hs_done = ap_const_logic_0;
    }
}

void hls_cropping_strm::thread_dst_V_V_TDATA() {
    dst_V_V_TDATA = hls_cropping_strm_Block_proc_U0_dst_V_V_TDATA.read();
}

void hls_cropping_strm::thread_dst_V_V_TVALID() {
    dst_V_V_TVALID = hls_cropping_strm_Block_proc_U0_dst_V_V_TVALID.read();
}

void hls_cropping_strm::thread_dst_valid() {
    dst_valid =  (sc_logic) (hls_cropping_strm_Block_proc_U0_dst_valid.read()[0]);
}

void hls_cropping_strm::thread_dst_valid_ap_vld() {
    dst_valid_ap_vld = hls_cropping_strm_Block_proc_U0_dst_valid_ap_vld.read();
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_ap_continue() {
    hls_cropping_strm_Block_proc_U0_ap_continue = ap_const_logic_1;
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_ap_start() {
    hls_cropping_strm_Block_proc_U0_ap_start = ap_const_logic_1;
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_dst_V_V_TREADY() {
    hls_cropping_strm_Block_proc_U0_dst_V_V_TREADY = dst_V_V_TREADY.read();
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_src_TDATA() {
    hls_cropping_strm_Block_proc_U0_src_TDATA = src_TDATA.read();
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_src_TDEST() {
    hls_cropping_strm_Block_proc_U0_src_TDEST = src_TDEST.read();
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_src_TID() {
    hls_cropping_strm_Block_proc_U0_src_TID = src_TID.read();
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_src_TKEEP() {
    hls_cropping_strm_Block_proc_U0_src_TKEEP = src_TKEEP.read();
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_src_TLAST() {
    hls_cropping_strm_Block_proc_U0_src_TLAST = src_TLAST.read();
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_src_TSTRB() {
    hls_cropping_strm_Block_proc_U0_src_TSTRB = src_TSTRB.read();
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_src_TUSER() {
    hls_cropping_strm_Block_proc_U0_src_TUSER = src_TUSER.read();
}

void hls_cropping_strm::thread_hls_cropping_strm_Block_proc_U0_src_TVALID() {
    hls_cropping_strm_Block_proc_U0_src_TVALID = src_TVALID.read();
}

void hls_cropping_strm::thread_sof_sig() {
    sof_sig =  (sc_logic) (hls_cropping_strm_Block_proc_U0_sof_sig.read()[0]);
}

void hls_cropping_strm::thread_sof_sig_ap_vld() {
    sof_sig_ap_vld = hls_cropping_strm_Block_proc_U0_sof_sig_ap_vld.read();
}

void hls_cropping_strm::thread_src_TREADY() {
    src_TREADY = hls_cropping_strm_Block_proc_U0_src_TREADY.read();
}

void hls_cropping_strm::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"src_TDATA\" :  \"" << src_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TKEEP\" :  \"" << src_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TSTRB\" :  \"" << src_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TUSER\" :  \"" << src_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TLAST\" :  \"" << src_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TID\" :  \"" << src_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TDEST\" :  \"" << src_TDEST.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"dst_V_V_TDATA\" :  \"" << dst_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_valid\" :  \"" << dst_valid.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sof_sig\" :  \"" << sof_sig.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TVALID\" :  \"" << src_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_TREADY\" :  \"" << src_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_V_V_TVALID\" :  \"" << dst_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_V_V_TREADY\" :  \"" << dst_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"sof_sig_ap_vld\" :  \"" << sof_sig_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_valid_ap_vld\" :  \"" << dst_valid_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

