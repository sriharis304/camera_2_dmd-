// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_synchr_strm,hls_ip_2014_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=174,HLS_SYN_LUT=1}" *)

module hls_synchr_strm (
        ap_clk,
        ap_rst_n,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        dst_TDATA,
        dst_TVALID,
        dst_TREADY,
        dst_TKEEP,
        dst_TSTRB,
        dst_TUSER,
        dst_TLAST,
        dst_TID,
        dst_TDEST
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_true = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;

input   ap_clk;
input   ap_rst_n;
input  [63:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
input  [7:0] src_TKEEP;
input  [7:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
output  [63:0] dst_TDATA;
output   dst_TVALID;
input   dst_TREADY;
output  [7:0] dst_TKEEP;
output  [7:0] dst_TSTRB;
output  [0:0] dst_TUSER;
output  [0:0] dst_TLAST;
output  [0:0] dst_TID;
output  [0:0] dst_TDEST;

reg src_TREADY;
reg dst_TVALID;
reg    ap_rst_n_inv;
reg   [0:0] begin_r = 1'b0;
reg   [63:0] tmp_data_V_reg_138;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_bdd_38;
wire    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg   [0:0] begin_load_reg_173;
reg    ap_sig_ioackin_dst_TREADY;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
reg   [63:0] ap_reg_ppstg_tmp_data_V_reg_138_pp0_it1;
reg   [7:0] tmp_keep_V_reg_143;
reg   [7:0] ap_reg_ppstg_tmp_keep_V_reg_143_pp0_it1;
reg   [7:0] tmp_strb_V_reg_148;
reg   [7:0] ap_reg_ppstg_tmp_strb_V_reg_148_pp0_it1;
wire   [0:0] tmp_user_V_fu_112_p1;
reg   [0:0] tmp_user_V_reg_153;
reg   [0:0] ap_reg_ppstg_tmp_user_V_reg_153_pp0_it1;
reg   [0:0] tmp_last_V_reg_158;
reg   [0:0] ap_reg_ppstg_tmp_last_V_reg_158_pp0_it1;
reg   [0:0] tmp_id_V_reg_163;
reg   [0:0] ap_reg_ppstg_tmp_id_V_reg_163_pp0_it1;
reg   [0:0] tmp_dest_V_reg_168;
reg   [0:0] ap_reg_ppstg_tmp_dest_V_reg_168_pp0_it1;
reg    ap_reg_ioackin_dst_TREADY = 1'b0;
reg   [0:0] ap_NS_fsm;
wire    ap_sig_pprstidle_pp0;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_dst_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_dst_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_dst_TREADY <= ap_const_logic_0;
    end else begin
        if ((~(ap_const_lv1_0 == begin_load_reg_173) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(((src_TVALID == ap_const_logic_0) & (ap_const_logic_1 == ap_const_logic_1)) | (~(ap_const_lv1_0 == begin_load_reg_173) & (ap_const_logic_0 == ap_sig_ioackin_dst_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
            ap_reg_ioackin_dst_TREADY <= ap_const_logic_0;
        end else if ((~(ap_const_lv1_0 == begin_load_reg_173) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((src_TVALID == ap_const_logic_0) & (ap_const_logic_1 == ap_const_logic_1)) & (ap_const_logic_1 == dst_TREADY))) begin
            ap_reg_ioackin_dst_TREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(((src_TVALID == ap_const_logic_0) & (ap_const_logic_1 == ap_const_logic_1)) | (~(ap_const_lv1_0 == begin_load_reg_173) & (ap_const_logic_0 == ap_sig_ioackin_dst_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (~(((src_TVALID == ap_const_logic_0) & (ap_const_logic_1 == ap_const_logic_1)) | (~(ap_const_lv1_0 == begin_load_reg_173) & (ap_const_logic_0 == ap_sig_ioackin_dst_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(((src_TVALID == ap_const_logic_0) & (ap_const_logic_1 == ap_const_logic_1)) | (~(ap_const_lv1_0 == begin_load_reg_173) & (ap_const_logic_0 == ap_sig_ioackin_dst_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        ap_reg_ppstg_tmp_data_V_reg_138_pp0_it1 <= tmp_data_V_reg_138;
        ap_reg_ppstg_tmp_dest_V_reg_168_pp0_it1 <= tmp_dest_V_reg_168;
        ap_reg_ppstg_tmp_id_V_reg_163_pp0_it1 <= tmp_id_V_reg_163;
        ap_reg_ppstg_tmp_keep_V_reg_143_pp0_it1 <= tmp_keep_V_reg_143;
        ap_reg_ppstg_tmp_last_V_reg_158_pp0_it1 <= tmp_last_V_reg_158;
        ap_reg_ppstg_tmp_strb_V_reg_148_pp0_it1 <= tmp_strb_V_reg_148;
        ap_reg_ppstg_tmp_user_V_reg_153_pp0_it1 <= tmp_user_V_reg_153;
        begin_load_reg_173 <= begin_r;
        tmp_data_V_reg_138 <= src_TDATA;
        tmp_dest_V_reg_168 <= src_TDEST;
        tmp_id_V_reg_163 <= src_TID;
        tmp_keep_V_reg_143 <= src_TKEEP;
        tmp_last_V_reg_158 <= src_TLAST;
        tmp_strb_V_reg_148 <= src_TSTRB;
        tmp_user_V_reg_153 <= src_TUSER;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_const_logic_1) & ~(((src_TVALID == ap_const_logic_0) & (ap_const_logic_1 == ap_const_logic_1)) | (~(ap_const_lv1_0 == begin_load_reg_173) & (ap_const_logic_0 == ap_sig_ioackin_dst_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) & ~(ap_const_lv1_0 == tmp_user_V_fu_112_p1))) begin
        begin_r <= ap_const_lv1_1;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. ///
always @ (ap_sig_bdd_38)
begin
    if (ap_sig_bdd_38) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_dst_TREADY assign process. ///
always @ (dst_TREADY or ap_reg_ioackin_dst_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_dst_TREADY)) begin
        ap_sig_ioackin_dst_TREADY = dst_TREADY;
    end else begin
        ap_sig_ioackin_dst_TREADY = ap_const_logic_1;
    end
end

assign ap_sig_pprstidle_pp0 = ap_const_logic_0;

/// dst_TVALID assign process. ///
always @ (src_TVALID or begin_load_reg_173 or ap_reg_ppiten_pp0_it2 or ap_reg_ioackin_dst_TREADY)
begin
    if ((~(ap_const_lv1_0 == begin_load_reg_173) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~((src_TVALID == ap_const_logic_0) & (ap_const_logic_1 == ap_const_logic_1)) & (ap_const_logic_0 == ap_reg_ioackin_dst_TREADY))) begin
        dst_TVALID = ap_const_logic_1;
    end else begin
        dst_TVALID = ap_const_logic_0;
    end
end

/// src_TREADY assign process. ///
always @ (src_TVALID or ap_sig_cseq_ST_pp0_stg0_fsm_0 or begin_load_reg_173 or ap_sig_ioackin_dst_TREADY or ap_reg_ppiten_pp0_it2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_const_logic_1) & ~(((src_TVALID == ap_const_logic_0) & (ap_const_logic_1 == ap_const_logic_1)) | (~(ap_const_lv1_0 == begin_load_reg_173) & (ap_const_logic_0 == ap_sig_ioackin_dst_TREADY) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        src_TREADY = ap_const_logic_1;
    end else begin
        src_TREADY = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (src_TVALID or ap_CS_fsm or begin_load_reg_173 or ap_sig_ioackin_dst_TREADY or ap_reg_ppiten_pp0_it2 or ap_sig_pprstidle_pp0)
begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_reg_ppiten_pp0_it0 = ap_const_logic_1;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_38 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_38 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end
assign dst_TDATA = ap_reg_ppstg_tmp_data_V_reg_138_pp0_it1;
assign dst_TDEST = ap_reg_ppstg_tmp_dest_V_reg_168_pp0_it1;
assign dst_TID = ap_reg_ppstg_tmp_id_V_reg_163_pp0_it1;
assign dst_TKEEP = ap_reg_ppstg_tmp_keep_V_reg_143_pp0_it1;
assign dst_TLAST = ap_reg_ppstg_tmp_last_V_reg_158_pp0_it1;
assign dst_TSTRB = ap_reg_ppstg_tmp_strb_V_reg_148_pp0_it1;
assign dst_TUSER = ap_reg_ppstg_tmp_user_V_reg_153_pp0_it1;
assign tmp_user_V_fu_112_p1 = src_TUSER;


endmodule //hls_synchr_strm

